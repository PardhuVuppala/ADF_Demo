{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ClientEmployeeData"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"LS_CSV_Appending_Files_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_CSV_Appending_Files'"
		},
		"PostgreSql_Connection_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'PostgreSql_Connection'"
		},
		"db_conn_customer_order_table_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'db_conn_customer_order_table'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "client-employee-server-india.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB_Cutomer_OrderDetails"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Admin_User"
		},
		"PostgreSql_Connection_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"PostgreSql_Connection_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DashBoard"
		},
		"PostgreSql_Connection_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		},
		"db_conn_customer_order_table_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "client-employee-server-india.database.windows.net"
		},
		"db_conn_customer_order_table_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB_Cutomer_OrderDetails"
		},
		"db_conn_customer_order_table_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Admin_User"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL-DS-Reporting-Demension-Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DemensionTable_Project_Details",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Reporting_UserData_Task",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "taskIds"
								},
								"datasetParameters": {
									"PrepToReportingUserData": {},
									"PrepToReportingTask": {},
									"Dimensiontable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FartTableCompletedandUnCompleted_Project_Details",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DemensionTable_Project_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GettingTotalCompletionProject": {},
									"Incompleteproject": {},
									"FartTableFor100CompletionProjects": {},
									"FarttableForNotCompletedProjects": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PL-Reporting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Reporting_UserData_Task')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL-Data-Injection')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_p41",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_p41",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "public.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "raw.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_p41",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_p41",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().destination.table"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Task"
								},
								"destination": {
									"table": "Task"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "userId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "userId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "projectName",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "projectName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "taskName",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "taskName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "teamMembers",
													"type": "String",
													"physicalType": "jsonb"
												},
												"sink": {
													"name": "teamMembers",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "dueDate",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "dueDate",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "completionPercentage",
													"type": "Int32",
													"physicalType": "integer"
												},
												"sink": {
													"name": "completionPercentage",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "forStoringTasks",
													"type": "String",
													"physicalType": "jsonb"
												},
												"sink": {
													"name": "forStoringTasks",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "UserData"
								},
								"destination": {
									"table": "UserData"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "first_name",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "first_name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "last_name",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "last_name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "email",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "email",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "address",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "address",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "gender",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "gender",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "dob",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "dob",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "role",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "role",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "phone_number",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "phone_number",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "password",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "password",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "taskIds",
													"type": "String",
													"physicalType": "ARRAY"
												},
												"sink": {
													"name": "taskIds",
													"type": "String",
													"physicalType": "nvarchar"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"folder": {
					"name": "PL-Injection"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_p41')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_p41')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Staging_To_Prep_UserData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Staging-to-Prep-UserData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF-Staging-UserData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UserdataCleaning": {},
									"StoringInDataBase": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PL-Staging-to-Prep"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF-Staging-UserData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Staging_To_Prep_Task')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Staging-to-Prep-Task",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFStagingTask",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PL-Staging-to-Prep"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFStagingTask')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Staging",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "InjectingData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Staging_To_Prep_UserData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PREP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pl_Staging_To_Prep_Task",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Reporting",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PREP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL-DS-Reporting-Demension-Table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "InjectingData",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL-DS-Reporting-Demension-Table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Excute_PipeLines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Staging_To_Prep_UserData')]",
				"[concat(variables('factoryId'), '/pipelines/Pl_Staging_To_Prep_Task')]",
				"[concat(variables('factoryId'), '/pipelines/PL-DS-Reporting-Demension-Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Staging_To_Prep_userData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "UserData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Prep_Task')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Prep"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "Task"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Prep_UserData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Prep"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "UserData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Reporting_Completed_Project_details_Fart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Reporting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "reporting",
					"table": "Completed_ProjectDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Staging_UserData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "dob",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "role",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "nvarchar"
					},
					{
						"name": "password",
						"type": "nvarchar"
					},
					{
						"name": "taskIds",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "UserData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Uncompleted_Projects')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Reporting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "reporting",
					"table": "Uncompleted_Project-Details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Staging_Task')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "Task"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Staging_to_Prep_Task')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "Task"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_p41')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "db_conn_customer_order_table",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DS-Injection"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/db_conn_customer_order_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_p41')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_Connection",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DS-Injection"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/reporting_DS_DB_userData_Task')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DS-Reporting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "reporting",
					"table": "Dimension_Table_userData_task"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_CSV_Appending_Files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_CSV_Appending_Files_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql_Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('PostgreSql_Connection_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('PostgreSql_Connection_properties_typeProperties_database')]",
					"username": "[parameters('PostgreSql_Connection_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('PostgreSql_Connection_password')]"
					},
					"sslMode": 1,
					"authenticationType": "Basic"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_conn_customer_order_table')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('db_conn_customer_order_table_properties_typeProperties_server')]",
					"database": "[parameters('db_conn_customer_order_table_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('db_conn_customer_order_table_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('db_conn_customer_order_table_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF-Staging-UserData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF-Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_DB_Staging_UserData",
								"type": "DatasetReference"
							},
							"name": "UserdataCleaning"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Staging_To_Prep_userData",
								"type": "DatasetReference"
							},
							"name": "StoringInDataBase"
						}
					],
					"transformations": [
						{
							"name": "RemovingDuplicatedata"
						},
						{
							"name": "SelectTheFiledsRequired"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          address as string,",
						"          gender as string,",
						"          dob as timestamp,",
						"          role as string,",
						"          phone_number as string,",
						"          password as string,",
						"          taskIds as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserdataCleaning",
						"UserdataCleaning aggregate(groupBy(id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          address,",
						"          gender,",
						"          dob,",
						"          role,",
						"          phone_number,",
						"          password,",
						"          taskIds),",
						"     Max_Dob = max(dob),",
						"     partitionBy('hash', 1)) ~> RemovingDuplicatedata",
						"filter1 select(mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          address,",
						"          gender,",
						"          dob,",
						"          role,",
						"          phone_number,",
						"          password,",
						"          taskIds",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTheFiledsRequired",
						"RemovingDuplicatedata filter(taskIds!= '{}') ~> filter1",
						"SelectTheFiledsRequired sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StoringInDataBase"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DB_Staging_UserData')]",
				"[concat(variables('factoryId'), '/datasets/DF_Staging_To_Prep_userData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFStagingTask')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF-Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Staging_Task",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Staging_to_Prep_Task",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "removeDuplicate"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          userId as string,",
						"          projectName as string,",
						"          taskName as string,",
						"          teamMembers as string,",
						"          dueDate as timestamp,",
						"          completionPercentage as integer,",
						"          forStoringTasks as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(id,",
						"          userId,",
						"          projectName,",
						"          taskName,",
						"          teamMembers,",
						"          dueDate,",
						"          completionPercentage,",
						"          forStoringTasks,",
						"          createdAt,",
						"          updatedAt),",
						"     TotalCompletion = sum(completionPercentage)) ~> removeDuplicate",
						"removeDuplicate select(mapColumn(",
						"          id,",
						"          userId,",
						"          projectName,",
						"          taskName,",
						"          teamMembers,",
						"          dueDate,",
						"          completionPercentage,",
						"          forStoringTasks,",
						"          createdAt,",
						"          updatedAt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Staging_Task')]",
				"[concat(variables('factoryId'), '/datasets/DS_Staging_to_Prep_Task')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Reporting_UserData_Task')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF-PREP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_DB_Prep_UserData",
								"type": "DatasetReference"
							},
							"name": "PrepToReportingUserData"
						},
						{
							"dataset": {
								"referenceName": "DS_DB_Prep_Task",
								"type": "DatasetReference"
							},
							"name": "PrepToReportingTask"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "reporting_DS_DB_userData_Task",
								"type": "DatasetReference"
							},
							"name": "Dimensiontable"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "ConvertingStringCollection"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string (taskIds)",
						"}",
						"source(output(",
						"          id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          address as string,",
						"          gender as string,",
						"          dob as timestamp,",
						"          role as string,",
						"          phone_number as string,",
						"          password as string,",
						"          taskIds as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PrepToReportingUserData",
						"source(output(",
						"          id as string,",
						"          userId as string,",
						"          projectName as string,",
						"          taskName as string,",
						"          teamMembers as string,",
						"          dueDate as timestamp,",
						"          completionPercentage as integer,",
						"          forStoringTasks as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PrepToReportingTask",
						"derivedColumn2, PrepToReportingTask join(taskIds == PrepToReportingTask@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"PrepToReportingUserData derive(taskIds = split(replace(replace(taskIds, '{', ''), '}', ''), ',')) ~> ConvertingStringCollection",
						"ConvertingStringCollection foldDown(unroll(taskIds),",
						"     mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          address,",
						"          gender,",
						"          dob,",
						"          role,",
						"          phone_number,",
						"          password,",
						"          taskIds",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(taskIds = replace(replace(taskIds, '\"', ''), '\"', '')) ~> derivedColumn2",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Dimensiontable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DB_Prep_UserData')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_Prep_Task')]",
				"[concat(variables('factoryId'), '/datasets/reporting_DS_DB_userData_Task')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF-Reporting"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reporting_DS_DB_userData_Task",
								"type": "DatasetReference"
							},
							"name": "GettingTotalCompletionProject"
						},
						{
							"dataset": {
								"referenceName": "reporting_DS_DB_userData_Task",
								"type": "DatasetReference"
							},
							"name": "Incompleteproject"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DB_Reporting_Completed_Project_details_Fart",
								"type": "DatasetReference"
							},
							"name": "FartTableFor100CompletionProjects"
						},
						{
							"dataset": {
								"referenceName": "DS_DB_Uncompleted_Projects",
								"type": "DatasetReference"
							},
							"name": "FarttableForNotCompletedProjects"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "selectingrequiredColumns"
						},
						{
							"name": "filter2"
						},
						{
							"name": "selectingRequiedCoulmns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          address as string,",
						"          gender as string,",
						"          dob as timestamp,",
						"          role as string,",
						"          phone_number as string,",
						"          password as string,",
						"          taskIds as string,",
						"          userId as string,",
						"          projectName as string,",
						"          taskName as string,",
						"          teamMembers as string,",
						"          dueDate as timestamp,",
						"          completionPercentage as integer,",
						"          forStoringTasks as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GettingTotalCompletionProject",
						"source(output(",
						"          id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          address as string,",
						"          gender as string,",
						"          dob as timestamp,",
						"          role as string,",
						"          phone_number as string,",
						"          password as string,",
						"          taskIds as string,",
						"          userId as string,",
						"          projectName as string,",
						"          taskName as string,",
						"          teamMembers as string,",
						"          dueDate as timestamp,",
						"          completionPercentage as integer,",
						"          forStoringTasks as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Incompleteproject",
						"GettingTotalCompletionProject filter(completionPercentage==100) ~> filter1",
						"filter1 select(mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          taskIds,",
						"          teamMembers,",
						"          dueDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingrequiredColumns",
						"Incompleteproject filter(completionPercentage<100) ~> filter2",
						"filter2 select(mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          taskIds,",
						"          projectName,",
						"          taskName,",
						"          teamMembers,",
						"          dueDate,",
						"          completionPercentage,",
						"          forStoringTasks",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiedCoulmns",
						"selectingrequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FartTableFor100CompletionProjects",
						"selectingRequiedCoulmns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FarttableForNotCompletedProjects"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/reporting_DS_DB_userData_Task')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_Reporting_Completed_Project_details_Fart')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_Uncompleted_Projects')]"
			]
		}
	]
}
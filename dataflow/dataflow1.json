{
	"name": "dataflow1",
	"properties": {
		"folder": {
			"name": "DF-Reporting"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "reporting_DS_DB_userData_Task",
						"type": "DatasetReference"
					},
					"name": "GettingTotalCompletionProject"
				},
				{
					"dataset": {
						"referenceName": "reporting_DS_DB_userData_Task",
						"type": "DatasetReference"
					},
					"name": "Incompleteproject"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DB_Reporting_Completed_Project_details_Fart",
						"type": "DatasetReference"
					},
					"name": "FartTableFor100CompletionProjects"
				},
				{
					"dataset": {
						"referenceName": "DS_DB_Uncompleted_Projects",
						"type": "DatasetReference"
					},
					"name": "FarttableForNotCompletedProjects"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "selectingrequiredColumns"
				},
				{
					"name": "filter2"
				},
				{
					"name": "selectingRequiedCoulmns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          address as string,",
				"          gender as string,",
				"          dob as timestamp,",
				"          role as string,",
				"          phone_number as string,",
				"          password as string,",
				"          taskIds as string,",
				"          userId as string,",
				"          projectName as string,",
				"          taskName as string,",
				"          teamMembers as string,",
				"          dueDate as timestamp,",
				"          completionPercentage as integer,",
				"          forStoringTasks as string,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> GettingTotalCompletionProject",
				"source(output(",
				"          id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          address as string,",
				"          gender as string,",
				"          dob as timestamp,",
				"          role as string,",
				"          phone_number as string,",
				"          password as string,",
				"          taskIds as string,",
				"          userId as string,",
				"          projectName as string,",
				"          taskName as string,",
				"          teamMembers as string,",
				"          dueDate as timestamp,",
				"          completionPercentage as integer,",
				"          forStoringTasks as string,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Incompleteproject",
				"GettingTotalCompletionProject filter(completionPercentage==100) ~> filter1",
				"filter1 select(mapColumn(",
				"          id,",
				"          first_name,",
				"          last_name,",
				"          taskIds,",
				"          teamMembers,",
				"          dueDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingrequiredColumns",
				"Incompleteproject filter(completionPercentage<100) ~> filter2",
				"filter2 select(mapColumn(",
				"          id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          gender,",
				"          taskIds,",
				"          projectName,",
				"          taskName,",
				"          teamMembers,",
				"          dueDate,",
				"          completionPercentage,",
				"          forStoringTasks",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingRequiedCoulmns",
				"selectingrequiredColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> FartTableFor100CompletionProjects",
				"selectingRequiedCoulmns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> FarttableForNotCompletedProjects"
			]
		}
	}
}